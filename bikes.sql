create database bikes;
use bikes;
show tables;
select* from order_items;
select * from categories;
SELECT * FROM BRANDS;
SELECT* FROM PRODUCTS;
ALTER TABLE ORDERS ADD PRIMARY KEY (ORDER_ID);
ALTER TABLE CUSTOMERS ADD PRIMARY KEY (CUSTOMER_ID);
ALTER TABLE CATEGORIES ADD PRIMARY KEY (CATEGORY_ID);
ALTER TABLE STORES ADD PRIMARY KEY (STORE_ID);
ALTER TABLE STAFFS ADD PRIMARY KEY (STAFF_ID);
ALTER TABLE ORDER_ITEMS ADD FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID);
ALTER TABLE ORDERS ADD FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID);
ALTER TABLE ORDER_ITEMS ADD FOREIGN KEY (ITEM_ID) REFERENCES CATEGORIES(CATEGORY_ID);
ALTER TABLE STOCKS ADD FOREIGN KEY (STORE_ID) REFERENCES STORES(STORE_ID);
ALTER TABLE ORDERS ADD FOREIGN KEY (STORE_ID) REFERENCES STORES(STORE_ID);
ALTER TABLE ORDERS ADD FOREIGN KEY (STAFF_ID) REFERENCES STAFFS(STAFF_ID);
ALTER TABLE PRODUCTS ADD FOREIGN KEY (CATEGORY_ID) REFERENCES CATEGORIES (CATEGORY_ID);
ALTER TABLE BRANDS ADD PRIMARY KEY (BRAND_ID);
ALTER TABLE PRODUCTS ADD FOREIGN KEY (BRAND_ID) REFERENCES BRANDS (BRAND_ID);

-- 1. SELECT PRODUCT_ID,BRAND_ID, BRAND_NAME IN ELECTRIC BIKES CATEGORY-- 
SELECT P.PRODUCT_ID, P.BRAND_ID, B.BRAND_NAME,C.CATEGORY_NAME FROM PRODUCTS AS P
JOIN BRANDS AS B ON P.BRAND_ID=B.BRAND_ID 
JOIN CATEGORIES AS C ON P.CATEGORY_ID=C.CATEGORY_ID WHERE C.CATEGORY_NAME='ELECTRIC BIKES'; 
 
-- 2. FIND THE NUMBER OF ORDERS BY EACH STAFFS -- 
SELECT S.STAFF_ID,concat(S.FIRST_NAME," " ,S.LAST_NAME) AS STAFF_NAME,S.STORE_ID,COUNT(O.ORDER_ID) AS TOTAL_ORDERS FROM STAFFS AS S 
JOIN ORDERS AS O ON S.STAFF_ID=O.STAFF_ID GROUP BY S.STAFF_ID ORDER BY COUNT(O.ORDER_ID) DESC;
 
-- 3. TOTAL SALES BY EACH STORE -- 
SELECT O.STORE_ID, S.STORE_NAME, SUM(ROUND(OI.LIST_PRICE)) AS TOTAL_SALES FROM ORDERS AS O 
JOIN ORDER_ITEMS AS OI ON O.ORDER_ID=OI.ORDER_ID JOIN STORES AS S ON O.STORE_ID=S.STORE_ID
GROUP BY O.STORE_ID ORDER BY TOTAL_SALES DESC;
	
-- 4.  TOTAL CUSTOMERS BY EACH STORE --
SELECT S.STORE_ID,S.STORE_NAME,S.STATE,COUNT(O.CUSTOMER_ID) AS TOTAL_CUSTOMERS FROM STORES AS S 
JOIN ORDERS AS O ON S.STORE_ID=O.STORE_ID GROUP BY S.STORE_ID ORDER BY COUNT(O.CUSTOMER_ID) DESC;

-- 5. Total orders across years--
select year(order_date), count(order_id) from orders group by year(order_date) order by count(order_id) desc ;

--  6. Sales by product category  --
SELECT  C.CATEGORY_NAME, SUM(ROUND(OI.LIST_PRICE)) AS REVENUE FROM PRODUCTS AS P JOIN 
ORDER_ITEMS AS OI ON OI. PRODUCT_ID= P.PRODUCT_ID JOIN CATEGORIES AS C ON C.CATEGORY_ID= P.CATEGORY_ID
GROUP BY C.CATEGORY_NAME ORDER BY REVENUE DESC;

-- 7. NUMBER OF PRODUCTS BY CATEGORY--
SELECT  C.CATEGORY_NAME, COUNT(P.PRODUCT_ID) AS PRODUCT_COUNT FROM CATEGORIES AS C JOIN
PRODUCTS AS P ON C.CATEGORY_ID=P.CATEGORY_ID GROUP BY C.CATEGORY_NAME;

-- 8. 5 LOWEST PRICE BICYCLES--
SELECT PRODUCT_ID, PRODUCT_NAME, LIST_PRICE FROM PRODUCTS ORDER BY LIST_PRICE ASC LIMIT 5; 

-- 9. 5 HIGHEST PRICE BICYCLES--
SELECT PRODUCT_ID, PRODUCT_NAME, LIST_PRICE FROM PRODUCTS ORDER BY LIST_PRICE DESC LIMIT 5;

-- 10. TOTAL QUANTITY ORDERED BY PRODUCT--
SELECT P.PRODUCT_ID, P.PRODUCT_NAME, SUM(QUANTITY) AS QUANTITY_ORDERED FROM PRODUCTS AS P JOIN 
ORDER_ITEMS AS OI ON P.PRODUCT_ID=OI.PRODUCT_ID GROUP BY P.PRODUCT_ID, P.PRODUCT_NAME 
ORDER BY QUANTITY_ORDERED DESC;

-- 11. NUMBER OF PRODUCT UNDER BRAND--
SELECT B.BRAND_NAME, COUNT(P.PRODUCT_ID) AS TOTAL_PRODUCTS FROM PRODUCTS AS P JOIN
BRANDS AS B ON B.BRAND_ID=P.BRAND_ID JOIN CATEGORIES AS C ON C.CATEGORY_ID =P.CATEGORY_ID 
GROUP BY BRAND_NAME ORDER BY TOTAL_PRODUCTS DESC;

-- 12.  CUSTOMER COUNT BY STORE--
SELECT O.STORE_ID, S.STORE_NAME,S.STATE,S.CITY, COUNT(O.CUSTOMER_ID) AS TOTAL_CUSTOMERS FROM ORDERS AS O JOIN
CUSTOMERS AS C ON C.CUSTOMER_ID=O.CUSTOMER_ID JOIN STORES AS S ON O.STORE_ID=S.STORE_ID 
GROUP BY O.STORE_ID, S.STORE_NAME,S.STATE,S.CITY ORDER BY TOTAL_CUSTOMERS DESC; 

-- 13. TOTAL STOCK KEPT BY CATEGORY IN STORE--
SELECT ST.STORE_ID, S.STORE_NAME, C.CATEGORY_ID, C.CATEGORY_NAME, SUM(ST.QUANTITY) AS TOTAL_STOCKS FROM STOCKS AS ST 
JOIN STORES AS S ON ST.STORE_ID=S.STORE_ID JOIN PRODUCTS AS P ON P.PRODUCT_ID=ST.PRODUCT_ID JOIN
CATEGORIES AS C ON P.CATEGORY_ID=C.CATEGORY_ID 
GROUP BY ST.STORE_ID, S.STORE_NAME, C.CATEGORY_ID, C.CATEGORY_NAME;

-- 14. TOTAL STOCK BY PRODUCTS IN STORE --
SELECT STORE_ID, PRODUCT_ID, SUM(QUANTITY) FROM STOCKS GROUP BY STORE_ID,PRODUCT_ID
ORDER BY STORE_ID,PRODUCT_ID;

-- 15.  TOTAL STOCK KEPT BY STORE--
SELECT STORE_ID, SUM(QUANTITY) FROM STOCKS GROUP BY STORE_ID
ORDER BY SUM(QUANTITY) DESC;

-- 16. TOP 5 ORDERED BRAND --
SELECT P.BRAND_ID,B.BRAND_NAME, MAX(OI.PRODUCT_ID) AS TOTAL_ORDERS FROM ORDER_ITEMS AS OI 
JOIN PRODUCTS AS P ON P.PRODUCT_ID=OI.PRODUCT_ID
JOIN BRANDS AS B ON B.BRAND_ID=P.BRAND_ID 
GROUP BY P.BRAND_ID,B.BRAND_NAME ORDER BY MAX(OI.PRODUCT_ID) DESC LIMIT 5;

-- 17. TOP 3 BRANDS BY REVENUE-- 
SELECT P.BRAND_ID,B.BRAND_NAME, SUM(ROUND(OI.LIST_PRICE)) AS TOTAL_REVENUE FROM ORDER_ITEMS AS OI 
JOIN PRODUCTS AS P ON P.PRODUCT_ID=OI.PRODUCT_ID
JOIN BRANDS AS B ON B.BRAND_ID=P.BRAND_ID 
GROUP BY P.BRAND_ID,B.BRAND_NAME ORDER BY SUM(OI.LIST_PRICE) DESC LIMIT 3;

-- 18.  3 LOWEST SELLING BRANDS--
SELECT P.BRAND_ID,B.BRAND_NAME, SUM(ROUND(OI.LIST_PRICE)) AS TOTAL_REVENUE FROM ORDER_ITEMS AS OI 
JOIN PRODUCTS AS P ON P.PRODUCT_ID=OI.PRODUCT_ID
JOIN BRANDS AS B ON B.BRAND_ID=P.BRAND_ID 
GROUP BY P.BRAND_ID,B.BRAND_NAME ORDER BY SUM(OI.LIST_PRICE) LIMIT 3;

-- 19.  TOP 5 SELLING PRODUCTS --
SELECT P.PRODUCT_NAME, OI.PRODUCT_ID, SUM(QUANTITY) AS SOLD_QUANTITY 
FROM PRODUCTS AS P JOIN ORDER_ITEMS AS OI ON P.PRODUCT_ID=OI.PRODUCT_ID 
GROUP BY P.PRODUCT_NAME,OI.PRODUCT_ID ORDER BY SUM(QUANTITY) DESC LIMIT 5;


-- 20. LEAST SELLING PRODUCTS--
SELECT P.PRODUCT_NAME, OI.PRODUCT_ID, SUM(QUANTITY) AS SOLD_QUANTITY 
FROM PRODUCTS AS P JOIN ORDER_ITEMS AS OI ON P.PRODUCT_ID=OI.PRODUCT_ID 
GROUP BY P.PRODUCT_NAME,OI.PRODUCT_ID HAVING SOLD_QUANTITY=1;






 
